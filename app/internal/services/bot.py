import asyncio
import logging
import textwrap
import uuid
from typing import Callable, Optional, List

import pydantic
from aiogram import Bot, Dispatcher, types, utils
from aiogram.utils import executor, exceptions
from aiogram.utils.callback_data import CallbackData
from pydantic import SecretStr, PositiveInt

from app.internal.services.game import Game
from app.internal.services.map import Map
from app.pkg.settings import get_settings


class TelegramBot:
	game: Game

	def __init__(self):
		self.game = Game(
			Map(
				x=7,
				y=11,
				conf=[
					['200', '120', '80', '50', '30', '20', '10', '5', '0', '0', '0'],
					['180', '150', '100', '70', '50', '40', '30', '15', '10', '5', '0'],
					['190', '210', '150', '120', '100', '80', '50', '30', '20', '10', '5']
				]
			)
		)
		logging.basicConfig(level=logging.INFO)
		self.settings = get_settings()
		self.bot: Bot = Bot(token=self.settings.TELEGRAM_TOKEN.get_secret_value())
		self.dp: Dispatcher = Dispatcher(self.bot)
		self.callback = CallbackData('codes', 'action', 'tg_id')

	async def cmd_start(self, message: types.Message) -> None:
		"""
		Conversation's entry point
		"""
		start_text = textwrap.dedent(
			"""
			<b>‚ñ™Ô∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> 
			<i>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:
			–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞ –±–µ—Ä–µ–≥—É –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –æ–∑–µ—Ä–∞. –î–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–æ–¥—É –∏–∑ –æ–∑–µ—Ä–∞. –í–æ–¥–∞ –∑–∞–≥—Ä—è–∑–Ω—è–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ö–æ–º–ø–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞—Ç—å, —á–∞—Å—Ç–∏—á–Ω–æ –æ—á–∏—â–∞—Ç—å –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –æ—á–∏—â–∞—Ç—å –≤–æ–¥—É. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –æ—á–∏—â–∞—é—Ç –≤–æ–¥—É, —É –Ω–∏—Ö —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–æ—Ö–æ–¥. –í—Å–µ–≥–æ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è 5 –ª–µ—Ç. –ö–∞–∂–¥—ã–π –≥–æ–¥ —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª—ã ‚Äì 20 –∫–≤–∞—Ä—Ç–∞–ª–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –∏–≥—Ä—ã. –í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞ –∫–æ–º–ø–∞–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
			–°—Ç—Ä–∞—Ç–µ–≥–∏–π –≤—Å–µ–≥–æ 5, –∏–º–µ—é—Ç —É—Å–ª–æ–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤:
			–ö—Ä–∞—Å–Ω–∞—è ‚Äì –Ø –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω—è—é –≤—Å–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã, —è –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Ä–∞–∑–≤–∏—Ç–∏–µ –æ—á–∏—Å—Ç–Ω—ã—Ö —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π, –±–µ—Ä–µ–≥—É –ø—Ä–∏—Ä–æ–¥—É
			–ó–µ–ª–µ–Ω–∞—è ‚Äì –Ø –æ—á–∏—â–∞—é –≤–æ–¥—É, –Ω–æ –Ω–µ –≤—Å—é, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –∑–∞—Ç—Ä–∞—Ç—ã. –Ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é —á—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–æ—Ç, –∫—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤–æ–¥—É –∏ —á—É—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º —Ç–æ—Ç, –∫—Ç–æ –Ω–µ –æ—á–∏—â–∞–µ—Ç –≤–æ–¥—É –≤–æ–æ–±—â–µ
			–ñ–µ–ª—Ç–∞—è ‚Äì –ì–æ—Ä–∏ –≤—Å–µ –æ–≥–Ω–µ–º, —Ö–æ—á—É –¥–µ–Ω–µ–≥ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å, –ø–æ—ç—Ç–æ–º—É —è –≤–æ–¥—É –≤–æ–æ–±—â–µ –Ω–µ –æ—á–∏—â–∞—é
			–°–∏–Ω–∏–π ‚Äì –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–µ—Ö–∞—Ç—å –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –∏ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –Ω–∞ –æ–∑–µ—Ä–µ —Ç–≤–æ—Ä–∏—Ç—Å—è –±–µ–∑–æ–±—Ä–∞–∑–∏–µ. –¢–æ–≥–¥–∞ –≤—Å–µ, –∫—Ç–æ –≤—ã–±—Ä–∞–ª –≤ —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ –ñ–µ–ª—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –±—É–¥—É—Ç –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã –Ω–∞ 20.
			–ë–µ–ª—ã–π ‚Äì –ú–æ–∂–Ω–æ –ø–æ–µ—Ö–∞—Ç—å –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –∏ –ø–æ–æ—â—Ä–∏—Ç—å —Ç–µ—Ö, –∫—Ç–æ –±–µ—Ä–µ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç–∫–æ–ª–æ–≥–∏–∏. –ò–º –≤—ã–¥–µ–ª—è—Ç —Å—É–±—Å–∏–¥–∏—é. –í—Å–µ, –∫—Ç–æ –≤—ã–±—Ä–∞–ª –≤ —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ –ö—Ä–∞—Å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –±—É–¥—É—Ç –ø–æ–æ—â—Ä–µ–Ω—ã –Ω–∞ 20.
			*–ï—Å–ª–∏ –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –≤—ã–±—Ä–∞–ª–æ –° –∏–ª–∏ –ë —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç–æ –ö –∏–ª–∏ –ñ –∏–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç –ø–æ–æ—â—Ä–µ–Ω—ã –∏–ª–∏ –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã –Ω–∞ 40.
			* –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∏–±–æ —Å–∏–Ω—é—é –ª–∏–±–æ –±–µ–ª—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ 0.
			* –ú–∞—Ä–∫–µ—Ä –¥–≤–∏–≥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç –ñ–µ–ª—Ç–æ–π –∏–ª–∏ –ö—Ä–∞—Å–Ω–æ–π –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
			
			–ü—Ä–∞–≤–∏–ª–∞: –í—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –∏ –≤–∞—à–∞ —Ü–µ–ª—å ‚Äì –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Å–µ–±—è –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –ª–µ—Ç. –¢–æ –µ—Å—Ç—å –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –¥–ª—è —Å–µ–±—è –ª—é–±–∏–º–æ–≥–æ.
			–≠—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
			–ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–≤–∏–∂–µ—Ç—Å—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∑–∞–∫–æ–Ω–∞–º.
			–í –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä –∏–¥–µ—Ç –Ω–∞–ª–µ–≤–æ –∏ –≤–≤–µ—Ä—Ö
			–í –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä –∏–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–æ –∏ –≤–Ω–∏–∑
			</i>
			"""
		)
		await self.bot.send_message(text=start_text, chat_id=message.chat.id, parse_mode='HTML')

	async def start_game(self, message: types.Message) -> None:
		await self.game.start_game()
		game_id = uuid.uuid4()
		logging.info(f"Game started: {game_id}")
		await self.send_message(user_id=message.chat.id, text=f"–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ {game_id}")
		await self.game_processing(game_id)

	async def stop_game(self, message: types.Message) -> None:
		await self.game.stop_game()
		await self.send_message(user_id=message.chat.id, text="–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

	async def notif_player_name(self):
		for p in self.game.players:
			name = await self.game.get_player_name(p.chat_id)
			await self.send_message(user_id=p.chat_id, text=name)

	async def iteration_qrtl_year(self, qrtl, year):
		if qrtl == 0:
			year += 1
		qrtl += 1
		if qrtl == 5:
			qrtl = 1
			year += 1
			await asyncio.sleep(self.settings.YEARS_TIME_SLEEP)
		return qrtl, year

	async def game_processing(self, game_id: uuid.UUID):
		year = 0
		qrtl = 0
		await self.notif_player_name()
		while self.game.is_game_stared and (year < 5 or qrtl < 4):
			qrtl, year = await self.iteration_qrtl_year(qrtl, year)
			for p in self.game.players:
				kb = await self.get_keyboard(chat_id=p.chat_id)
				await self.bot.send_message(
					chat_id=p.chat_id,
					text=f"–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ {qrtl} –∫–≤–∞—Ä—Ç–∞–ª {year} –≥–æ–¥–∞",
					reply_markup=kb
				)
			await asyncio.sleep(self.settings.QRTL_TIME_SLEEP - 10)
			for p in self.game.players:
				await self.bot.send_message(
					chat_id=p.chat_id,
					text=f"–û—Å—Ç–∞–ª–æ—Å—å 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è. "
				)
			await asyncio.sleep(10)
			await self.game.finish_round()
			for p in self.game.players:
				await self.send_message(user_id=p.chat_id, text=str(self.game.map))
			logging.info(f"map:\n{self.game.map}")
			top = await self.game.get_players_top()
			logging.info(f"–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n{top}")
			for p in self.game.players:
				await self.send_message(user_id=p.chat_id, text=f"–ö–≤–∞—Ä—Ç–∞–ª: {qrtl} –ì–æ–¥: {year}\n{top}")
		logging.info(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ {game_id}")

	async def play(self, message: types.Message):
		await self.game.add_player(message.chat.id)
		await self.send_message(user_id=message.chat.id, text="–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")

	async def set_strategy(self, query: types.CallbackQuery, callback_data: dict):
		await self.game.set_player_strategy(chat_id=callback_data['tg_id'], st=callback_data['action'])
		await self.bot.edit_message_text(
			f'–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.',
			query.from_user.id,
			query.message.message_id
		)
		logging.info(f"Player:{query.from_user} {callback_data['action']}")

	async def send_message(self, user_id: int, text: str, disable_notification: bool = False, *args, **kwargs) -> bool:
		"""
		Safe messages sender

		:param user_id:
		:param text:
		:param disable_notification:
		:return:
		"""
		try:
			await self.bot.send_message(user_id, text, disable_notification=disable_notification, *args, **kwargs)
		except exceptions.BotBlocked:
			logging.error(f"Target [ID:{user_id}]: blocked by user")
		except exceptions.ChatNotFound:
			logging.error(f"Target [ID:{user_id}]: invalid user ID")
		except exceptions.RetryAfter as e:
			logging.error(f"Target [ID:{user_id}]: Flood limit is exceeded. Sleep {e.timeout} seconds.")
			await asyncio.sleep(e.timeout)
			return await self.send_message(user_id, text, *args, **kwargs)  # Recursive call
		except exceptions.UserDeactivated:
			logging.error(f"Target [ID:{user_id}]: user is deactivated")
		except exceptions.TelegramAPIError:
			logging.exception(f"Target [ID:{user_id}]: failed")
		else:
			logging.info(f"Target [ID:{user_id}]: success")
			return True
		return False

	async def get_keyboard(self, chat_id: int):
		print(chat_id)
		return types.InlineKeyboardMarkup().row(
			types.InlineKeyboardButton(
				'üî¥',
				callback_data=self.callback.new(action='üî¥', tg_id=chat_id)
			),
			types.InlineKeyboardButton(
				'üü¢',
				callback_data=self.callback.new(action='üü¢', tg_id=chat_id)
			),
			types.InlineKeyboardButton(
				'üü°',
				callback_data=self.callback.new(action='üü°', tg_id=chat_id)
			),
			types.InlineKeyboardButton(
				'üîµ',
				callback_data=self.callback.new(action='üîµ', tg_id=chat_id)
			),
			types.InlineKeyboardButton(
				'‚ö™',
				callback_data=self.callback.new(action='‚ö™', tg_id=chat_id)
			),
		)

	def register_handlers(self):
		self.dp.register_message_handler(self.cmd_start, commands="start")
		self.dp.register_message_handler(self.play, commands="play")
		self.dp.register_message_handler(self.start_game, commands="admin_start_game")
		self.dp.register_message_handler(self.stop_game, commands="admin_stop_game")

		self.dp.register_callback_query_handler(self.set_strategy, self.callback.filter(action='üî¥'))
		self.dp.register_callback_query_handler(self.set_strategy, self.callback.filter(action='üü¢'))
		self.dp.register_callback_query_handler(self.set_strategy, self.callback.filter(action='üü°'))
		self.dp.register_callback_query_handler(self.set_strategy, self.callback.filter(action='üîµ'))
		self.dp.register_callback_query_handler(self.set_strategy, self.callback.filter(action='‚ö™'))

	# self.dp.register_message_handler(self.gen_admin_token, commands="gen_admin_token")
	# self.dp.register_message_handler(self.get_users, commands="all")
	# self.dp.register_message_handler(self.delete_user, commands="delete")
	# self.dp.register_message_handler(self.set_phone, commands="phone")

	# self.dp.register_callback_query_handler(self.get_recommendations, self.callback.filter(action='-6'))
	# self.dp.register_callback_query_handler(self.get_full_description, self.callback.filter(action='-7'))
	# self.dp.register_message_handler(
	# 	self.validate_token,
	# 	regexp=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
	# )
	# self.dp.register_message_handler(self.get_code_description)

	def run(self):
		loop = asyncio.get_event_loop_policy()
		loop = loop.get_event_loop()
		self.register_handlers()
		executor.start_polling(self.dp, skip_updates=True, loop=loop)
